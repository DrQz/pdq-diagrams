#! /usr/bin/perl -w
#
# Extract PDQ nodes and streams from Report file and emit a GV dot file.
# Using PDQ 7.0.0 and Graphviz 2.36 (2.36.0)
# Created by NJG on Tuesday, December 05, 2017
#
# Version 1: Use nodes as keys and streams as values
# Version 2: Use streams as keys and nodes as values
# Version 3: Hash PDQ node types to select GV image

use strict;
use Data::Dumper;

# Globals
my $nwrap = 6;
my $debugging = 0;
my $openqnm = 1;
my $started = 0;
my %streamKV; # hash of arrays of nodes
my %nodetype; # hash of node types


#############################
# Tokenize Report parameters 
#############################
my $filename = $ARGV[0];
if (not defined $filename) {
	die "Usage: pdqx.pl base filename\n";
}

my $infile = "$filename-rpt.txt";
open(INFILE, "< $infile") or die "Can't open $infile: $!";

while (<INFILE>) {
	my $line = $_;

	# Keyword pattern
	if ($line =~ m/Node|Sched|Resource|Workload|Class|Demand/ and !$started) {
		# start WORKLOAD section
		$started = 1;
		next; 
	}

	if ($started) {		
		if ($line =~  /---/) {
			# skip heads and underline
			next;
		}

		if ($line =~ m/Queueing|Circuit|Totals/) {
			# end of WORKLOAD section
			$started = 0;
			last; # break out of loop
		}
	
		# tokenize current line
		my @fields = split(' ', $line);  # matches any whitespace

		# Since each line (array) is a mix of numbers and names (as strings)
		# there is ambiguity between fields, e.g., both 'Node' and 'Demand' 
		# fields are numbers but Perl doesn't distinguish integers.
		# Therefore, we need to reference each @fields entry by its index. 
		# However, indexing can generate the annoying Perl warning:
		#    "Use of uninitialized value $fields[i] ..."
		# The following if statements suppress that warning.

		if ($fields[2]) { # valid Resource name
			# node type in $fields[1] used to select correct queue image
			$nodetype{$fields[2]} = $fields[1];
		}

		if ($fields[4]) { # valid QNM type
			$openqnm = 0 if ($fields[4] eq "Closed"); # initialized true
		}

		if ($fields[5]) { # valid service Demand
			# node must have non-zero demand for work to get its name
			push(@{$streamKV{$fields[3]}}, $fields[2]) if ($fields[5] > 0);
		}
	}
}

close(INFILE) or die "Can't close $infile: $!";

# Diagnostics
if ($debugging) {
	print Dumper(\%nodetype);
	print Dumper(\%streamKV);
}

########################
# Emit GV dot format
########################
my $dot = "$filename.dot";
open(DOT, "> $dot") or die "Can't open $dot: $!";

# Start GV block
my $datestring = localtime();
printf DOT "%s\n", "/* Generated by pdqx.pl on $datestring */";
printf DOT "%s\n", "/* Performance Dynamics Company, www.perfdynamics.com */";
printf DOT "%s\n", "digraph G {";
printf DOT "\t%s\n", "graph [shape=none,label=\"PDQX of \'$filename\' model on $datestring\",labelloc=b,fontsize=18,fontcolor=gray];";
printf DOT "\t%s\n", "size=\"22,16\";";
printf DOT "\t%s\n", "compound=true;";
printf DOT "\t%s\n", "ranksep=4.0;";
printf DOT "\t%s\n", "node [shape=plaintext,fontsize=16,label=\"\"];";

if ($openqnm and (keys %nodetype >= $nwrap)) {
	printf DOT "\t%s\n", "rankdir=LR;";
}

# Define sources/sinks
if ($openqnm) {
	for my $key (keys %streamKV) {
		printf DOT "\t%s%s%s\n", "src_", "$key", "[label=$key];";
		printf DOT "\t%s%s%s\n", "snk_", "$key", "[label=$key];";
	}
} else { #closedqnm
	for my $key (keys %streamKV) {
		printf DOT "\t%s%s\n", "term_", "$key [shape=none,label=$key,image=\"images/node-delay.png\"];";
	}
}

# Define queueing nodes
for my $key (keys %streamKV) { # stream
	foreach (@{$streamKV{$key}}) { # listed node 
		if ($nodetype{$_} eq "MSQ") {
			printf DOT "\t%s\n", "$_ [shape=none,label=$_,image=\"images/node-multi.png\"];";
		} else {
			printf DOT "\t%s\n", "$_ [shape=none,label=$_,image=\"images/node-single.png\"];";
		}
	}
}

# Wrap after $nwrap nodes per line
my $ncount = 0;
for my $nname (keys %nodetype) { # listed node 
	printf DOT "\t%s", "{ rank=same; " if ($ncount == 0);
	printf DOT "%s", "$nname; ";
	if ($ncount++ >= $nwrap) {
		printf DOT "}\n";
		$ncount = 0;
		next;
	}
}
# When we fall out of loop with < $ncount nodes printed
printf DOT "}\n" if $ncount != 0;

# Define arcs
for my $key (keys %streamKV) { # stream
	if ($openqnm) {
		printf DOT "\t%s", "src_$key -> ";
	} else { #closedqnm
		printf DOT "\t%s", "term_$key -> ";
	}
	
	foreach (@{$streamKV{$key}}) { # nodes 
		printf DOT "$_";
		printf DOT " -> ";
	}
	
	if ($openqnm) {
		printf DOT "%s", "snk_$key;";
	} else { #closedqnm
		printf DOT "%s", "term_$key;" ;
	}
	
	printf DOT "\n";
}

if (not $openqnm) {
	for my $key (keys %streamKV) { # streams 
		printf DOT "\t%s","{rank=same; ";
		foreach (@{$streamKV{$key}}) { # nodes
			printf DOT "$_; ";
		}
		printf DOT "}\n";
	}
}

# End of GV block
printf DOT "}\n";

close(DOT) or die "Can't close $dot: $!";
